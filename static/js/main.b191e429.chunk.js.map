{"version":3,"sources":["types/Filter.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["Filter","TodoList","todos","setSelectedTodo","selectedTodo","className","map","todo","id","title","completed","isTodoSelected","cn","type","onClick","TodoFilter","query","onQueryChange","filterStatus","onFilterChange","onSubmit","event","preventDefault","value","onChange","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","user","isLoading","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","setTodos","setUser","setIsLoading","errorMessage","setErrorMessage","setFilterStatus","setQuery","useEffect","catch","finally","userId","error","console","warn","filtredTodos","useMemo","filtered","filter","trim","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b191e429.chunk.js","sourcesContent":["export enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype TodoListProps = {\n  todos: Todo[];\n  setSelectedTodo: (todo: Todo) => void,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({\n  todos,\n  setSelectedTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const { id, title, completed } = todo;\n        const isTodoSelected = selectedTodo?.id === id;\n\n        return (\n          <tr data-cy=\"todo\" key={todo.id}>\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={cn({\n                    'far fa-eye': !isTodoSelected,\n                    'far fa-eye-slash': isTodoSelected,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { Filter } from '../../types/Filter';\n\ntype TodoFilterProps = {\n  query: string;\n  onQueryChange: (newQuery: string) => void;\n  filterStatus: Filter;\n  onFilterChange: (newFilterStatus: Filter) => void,\n};\n\nexport const TodoFilter: React.FC<TodoFilterProps> = ({\n  query,\n  onQueryChange,\n  filterStatus,\n  onFilterChange,\n}) => {\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterStatus}\n            onChange={event => onFilterChange(event.target.value as Filter)}\n          >\n            <option value={Filter.All}>All</option>\n            <option value={Filter.Active}>Active</option>\n            <option value={Filter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype TodoModalProps = {\n  user: User | null,\n  selectedTodo: Todo,\n  setSelectedTodo: ((todo: Todo | null) => void)\n  isLoading: boolean,\n};\n\nexport const TodoModal: React.FC<TodoModalProps> = ({\n  user,\n  selectedTodo,\n  setSelectedTodo,\n  isLoading,\n}) => {\n  const { id, title, completed } = selectedTodo;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {isLoading && <Loader />}\n\n      {!isLoading && user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos, getUser } from './api';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { Filter } from './types/Filter';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [filterStatus, setFilterStatus] = useState(Filter.All);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch(() => setErrorMessage('There are no todos'))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      setIsLoading(true);\n      getUser(selectedTodo.userId)\n        .then(setUser)\n        .catch((error) => {\n        // eslint-disable-next-line no-console\n          console.warn(error);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedTodo]);\n\n  const filtredTodos: Todo[] = useMemo(() => {\n    let filtered = todos;\n\n    switch (filterStatus) {\n      case Filter.Active:\n        filtered = filtered.filter(todo => !todo.completed);\n        break;\n\n      case Filter.Completed:\n        filtered = filtered.filter(todo => todo.completed);\n        break;\n\n      default:\n        break;\n    }\n\n    if (query.trim()) {\n      filtered = filtered.filter(\n        todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n\n    return filtered;\n  }, [todos, filterStatus, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={setQuery}\n                filterStatus={filterStatus}\n                onFilterChange={setFilterStatus}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && !selectedTodo\n                ? <Loader />\n\n                : (\n                  <TodoList\n                    todos={filtredTodos}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n\n            {errorMessage && (\n              <div className=\"notification is-danger\">\n                {errorMessage}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          user={user}\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n          isLoading={isLoading}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}